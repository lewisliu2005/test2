
# 外部排序輸入時間分析與圖表繪製

## 組員名單

- 林榆傑 41243226
- 劉宗修 41243250

---

## 題目背景

在記憶體容量有限、資料量遠大於記憶體的情況下（即 $S \ll n$），使用課本《程式 7-21》進行外部排序。

---

## 解題策略

本題分為兩個部分：

### (a) 推導輸入時間公式

需計算外部排序第二階段（$k$-way merge）的總輸入時間，時間因素包括：

* 尋道時間： $t_s$
* 延遲時間： $t_l$
* 傳輸每筆資料的時間： $t_t$

---

### (b) 數值分析與圖表繪製

在給定相關參數下，繪製總輸入時間 $t_{\text{input}}$ 隨 $k$（每輪合併的 run 數）變化的圖形，並觀察是否存在某個 $k$ 值使得：

$$
t_{\text{input}} \approx t_{\text{CPU}}
$$

即輸入所需時間與 CPU 處理時間相近。

---

## 符號定義

| 參數               | 解釋                   |
| ---------------- | -------------------- |
| $n$              | 資料總筆數                |
| $m$              | 初始 run 數量            |
| $S$              | 記憶體容量                |
| $t_s$            | 磁碟尋道時間（seek time）    |
| $t_l$            | 磁碟延遲時間（latency time） |
| $t_t$            | 每筆資料的傳輸時間            |
| $t_{\text{CPU}}$ | CPU 合併所有 run 所花的總時間  |
| $k$              | 每輪合併的 run 數          |

---

## 程式實作與推導

### (a) 輸入時間公式推導

1. 外部排序第 2 階段為合併階段。
2. 初始有 $m$ 個 run，使用 $k$-way merge。
3. 需進行 $\log_k m$ 輪合併（向上取整）。
4. 記憶體 $S$ 分為 $k+1$ 個緩衝區（ $k$ 個輸入緩衝區 + 1 個輸出緩衝區）。
5. 每個輸入緩衝區大小為 $\frac{S}{k+1}$。
6. 每個 run 的資料量為 $\frac{n}{m}$，每次讀取 $\frac{S}{k+1}$ 筆，訪問次數為：

$$
\left\lceil \frac{n/m}{S/(k+1)} \right\rceil
$$

7. 每次磁盤訪問時間為：

$$
\left\lceil \frac{n/m}{S/(k+1)} \right\rceil \cdot (t_s + t_l)
$$

8. 單輪總時間為：

$$
\left\lceil \frac{n/m}{S/(k+1)} \right\rceil \cdot (t_s + t_l) + (n \cdot t_t)
$$

9. 最終總輸入時間為：

$$
t_{\text{input}} = \left( \left\lceil \frac{n/m}{S/(k+1)} \right\rceil \cdot (t_s + t_l) + (n \cdot t_t) \right) \cdot \log_k m
$$

---

## (b) 數值分析與圖形呈現

### 題目參數整理：

| 參數    | 數值        |
| ----- | --------- |
| $n$   | 200,000   |
| $m$   | 64        |
| $S$   | 2,000     |
| $t_s$ | 0.08 sec  |
| $t_l$ | 0.02 sec  |
| $t_t$ | 0.001 sec |

---

### 數學代入與簡化：

$$
t_{\text{input}} = \left( \left\lceil \frac{3125}{\frac{2000}{k+1}} \right\rceil \cdot 0.1 + 200 \right) \cdot \log_k 64
$$

---

### 計算表格：

| $k$ | $\frac{S}{k+1}$ | 批次數 | $\log_k 64$ | 單輪時間  | $t_{\text{input}}$ (sec) |
| --- | --------------- | --- | ----------- | ----- | ------------------------ |
| 2   | 666.67          | 5   | 6.00        | 200.5 | 1203.0                   |
| 4   | 400.0           | 8   | 3.00        | 200.8 | 602.4                    |
| 8   | 222.22          | 15  | 2.00        | 201.5 | 403.0                    |
| 16  | 117.65          | 27  | 1.50        | 202.7 | 304.0                    |
| 32  | 60.61           | 52  | 1.20        | 205.2 | 246.2                    |
| 50  | 39.22           | 80  | 1.06        | 208.0 | 221.1                    |
| 100 | 19.80           | 158 | 0.90        | 215.8 | 194.9                    |
| 200 | 9.95            | 315 | 0.78        | 231.5 | 181.7                    |
| 300 | 6.64            | 471 | 0.73        | 247.1 | 180.2                    |
| 400 | 4.99            | 627 | 0.69        | 262.7 | 182.3                    |
| 500 | 3.99            | 783 | 0.67        | 278.3 | 186.2                    |
| 600 | 3.33            | 940 | 0.65        | 294.0 | 191.1                    |

---

### 圖形呈現



---

## 分析與觀察

### 趨勢分析：

* 隨 $k$ 增加，緩衝區變小，單輪存取時間增加；
* 但合併輪數 $\log_k m$ 減少；
* 整體 $t_{\text{input}}$ 呈下降趨勢，並在 $k \geq 200$ 時趨於穩定。

### 平衡觀察：

*  $k$ 越大 → 合併輪數少，時間短；
* 但緩衝空間變小 → 存取次數變多。
* 須根據實際系統調整，建議 $k \approx 300$ 為佳。

### 是否 $t_{\text{input}} \approx t_{\text{CPU}}$？

*  $t_{\text{input}}$ 介於約 180–1203 秒；
* 若 $t_{\text{CPU}}$ 落在此區間，可能存在交會點；
* 若 $t_{\text{CPU}}$ 明顯小或大於此範圍則否。

---

## 效能分析

### 整體公式：

$$
t_{\text{input}} = \left( \left\lceil \frac{n/m}{S/(k+1)} \right\rceil \cdot (t_s + t_l) + (n \cdot t_t) \right) \cdot \log_k m
$$

### 重點觀察：

* 增加 $S$ 可降低存取次數；
* 選擇合適 $k$ 是效能最佳化的關鍵。

---

## Merge 次數驗證

* $\log_2 4 = 2$ → 2 輪合併
* $\log_4 4 = 1$ → 1 輪合併
* $\log_4 11 \approx 1.73$ → 向上取整為 2 輪

→ 證實： $\log_k m$ 為合併輪數

---

## 結論

* 得證 $\log_k m$ 代表合併輪數。
* K-way merge 可有效降低外部排序成本。
* 最佳化 $k$ 與 $S$ 的配置對效能有決定性影響。

## 心得
這題讓我們深入了解外部排序中，I/O 時間與合併策略的交互關係，從公式推導到數據分析，能清楚看出不同參數設定下的影響，有助於日後設計高效能儲存系統或資料處理流程。

